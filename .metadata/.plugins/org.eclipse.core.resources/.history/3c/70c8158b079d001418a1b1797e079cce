package org.example.asteroides;

import java.util.List;
import java.util.Vector;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint.Style;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.ShapeDrawable;
import android.graphics.drawable.shapes.RectShape;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;

public class VistaJuego extends View implements SensorEventListener {
	// //// ASTEROIDES //////
	private Vector<Grafico> Asteroides; // Vector con los Asteroides
	private int numAsteroides = 5; // Número inicial de asteroides
	private int numFragmentos = 3; // Fragmentos en que se divide

	// //// NAVE //////
	private Grafico nave;// Gráfico de la nave
	private Grafico misil;// Gráfico de la nave
	private boolean misilActivo = false;
	private int tiempoMisil;
	
	private int giroNave; // Incremento de dirección
	private float aceleracionNave; // aumento de velocidad
	// Incremento estándar de giro y aceleración
	private static final int PASO_GIRO_NAVE = 5;
	private static final float PASO_ACELERACION_NAVE = 0.5f;

	// / Thread y Tiempo ////
	private ThreadJuego thread = new ThreadJuego();
	// Cambios proceso ms
	private static int PERIODO_PROCESO = 50;
	// Cuando se realizo el ultimo proceso
	private long ultimoProceso = 0;

	private boolean hayValorInicial = false;
	private float valorInicial;

	private static String FicheroPreferencias = "com.example.asteroides_preferences";
	private boolean activarTeclado, activarSensor, activarPantalla;

	public VistaJuego(Context context, AttributeSet attrs) {
		super(context, attrs);
		Drawable drawableNave, drawableAsteroide, drawableMisil;
		drawableAsteroide = context.getResources().getDrawable(
				R.drawable.asteroide1);
		Asteroides = new Vector<Grafico>();
		for (int i = 0; i < numAsteroides; i++) {
			Grafico asteroide = new Grafico(this, drawableAsteroide);
			asteroide.setIncY(Math.random() * 4 - 2);
			asteroide.setIncX(Math.random() * 4 - 2);
			asteroide.setAngulo((int) (Math.random() * 360));
			asteroide.setRotacion((int) (Math.random() * 8 - 4));
			Asteroides.add(asteroide);
		}

		// Nave

		drawableNave = context.getResources().getDrawable(R.drawable.nave);
		nave = new Grafico(this, drawableNave);

		SharedPreferences prefs = context.getSharedPreferences(
				FicheroPreferencias, Context.MODE_PRIVATE);
		numFragmentos = Integer.parseInt(prefs.getString("fragmentos", "3"));
		activarTeclado = prefs.getBoolean("teclado", true);
		activarSensor = prefs.getBoolean("sensosres", true);
		activarPantalla = prefs.getBoolean("pantalla", true);

		ShapeDrawable dMisil = new ShapeDrawable(new RectShape());
		dMisil.getPaint().setColor(Color.WHITE);
		dMisil.getPaint().setStyle(Style.STROKE);
		dMisil.setIntrinsicHeight(3);
		dMisil.setIntrinsicWidth(15);
		drawableMisil=dMisil;
		
		
		if (activarSensor) {
			SensorManager mSensorManager = (SensorManager) context
					.getSystemService(Context.SENSOR_SERVICE);
			List<Sensor> listSensors = mSensorManager
					.getSensorList(Sensor.TYPE_ORIENTATION);

			if (!listSensors.isEmpty()) {
				Sensor orientationSensor = listSensors.get(0);
				mSensorManager.registerListener(this, orientationSensor,
						SensorManager.SENSOR_DELAY_GAME);
			}
		}
		// Posicionamos la nave en el centro

	}

	@Override
	protected void onSizeChanged(int ancho, int alto, int ancho_anter,
			int alto_anter) {
		super.onSizeChanged(ancho, alto, ancho_anter, alto_anter);
		// Posicionamos la nave en el centro
		nave.setCenX((int) ancho / 2);
		nave.setCenY((int) alto / 2);

		// A partir del posicionamiento de la nave posicionamos los asteroides
		for (Grafico asteroide : Asteroides) {
			do {
				asteroide.setCenX(Math.random()
						* (ancho - asteroide.getAncho()));
				asteroide.setCenY(Math.random() * (alto - asteroide.getAlto()));
			} while (asteroide.distancia(nave) < (ancho + alto) / 5);
		}

		ultimoProceso = System.currentTimeMillis();
		thread.start();
	}

	@Override
	protected synchronized void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		for (Grafico asteroide : Asteroides) {
			asteroide.dibujaGrafico(canvas);
		}
		nave.dibujaGrafico(canvas);
	}

	protected synchronized void actualizarFisica() {
		long ahora = System.currentTimeMillis();
		// regresa si el periodo de actualizacion no se ha complado
		if (ultimoProceso + PERIODO_PROCESO > ahora) {
			return;
		}
		// Para una ejecucion en tiempo real calculamos retardo
		double retardo = (ahora - ultimoProceso) / PERIODO_PROCESO;
		ultimoProceso = ahora;

		// Actualizacion de la velocidad y direccion de la nave a partir de
		// giro nave y acelerfacion nave segun la entrada del jugador
		nave.setAngulo((int) (nave.getAngulo() + giroNave * retardo));
		double nIncX = nave.getIncX() + aceleracionNave
				* Math.cos(Math.toRadians(nave.getAngulo())) * retardo;
		double nIncY = nave.getIncY() + aceleracionNave
				* Math.sin(Math.toRadians(nave.getAngulo())) * retardo;

		// Actualizamos el modulo si no se excede el maximo
		if (Math.hypot(nIncX, nIncY) <= nave.getMaxVelocidad()) {
			nave.setIncX(nIncX);
			nave.setIncY(nIncY);
		}

		// Actualizamos posiciones x e y
		nave.incrementaPos(retardo);
		for (Grafico asteroid : Asteroides) {
			asteroid.incrementaPos(retardo);
		}
	}

	@Override
	public boolean onKeyDown(int codigoTecla, KeyEvent evento) {
		super.onKeyDown(codigoTecla, evento);

		boolean procesada = true;
		if (activarTeclado) {
			switch (codigoTecla) {
			case KeyEvent.KEYCODE_DPAD_UP:
				aceleracionNave = +PASO_ACELERACION_NAVE;
				break;
			case KeyEvent.KEYCODE_DPAD_LEFT:
				giroNave = -PASO_GIRO_NAVE;
				break;
			case KeyEvent.KEYCODE_DPAD_RIGHT:
				giroNave = +PASO_GIRO_NAVE;
				break;
			case KeyEvent.KEYCODE_DPAD_CENTER:
			case KeyEvent.KEYCODE_ENTER:
				// activarMisil();
				break;
			default:
				procesada = false;
				break;
			}
		}
		return procesada;

	}

	@Override
	public boolean onKeyUp(int codigoTecla, KeyEvent evento) {
		super.onKeyUp(codigoTecla, evento);

		boolean procesada = true;
		if (activarTeclado) {
			switch (codigoTecla) {
			case KeyEvent.KEYCODE_DPAD_UP:
				aceleracionNave = 0;
				break;
			case KeyEvent.KEYCODE_DPAD_LEFT:
			case KeyEvent.KEYCODE_DPAD_RIGHT:
				giroNave = 0;
				break;
			default:
				procesada = false;
				break;
			}
		}

		return procesada;

	}

	private float mX = 0, mY = 0;
	private boolean disparo = false;

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		super.onTouchEvent(event);
		if (activarPantalla) {
			float x = event.getX();
			float y = event.getY();
			switch (event.getAction()) {
			case MotionEvent.ACTION_DOWN:
				disparo = true;
				break;
			case MotionEvent.ACTION_MOVE:
				float dx = Math.abs(x - mX);
				float dy = Math.abs(y - mY);
				if (dy < 6 && dx > 6) {
					giroNave = Math.round((x - mX) / 2);
					disparo = false;
				} else if (dx < 6 && dy > 6) {
					float aceleracion = Math.round((mY - y) / 25);
					// No permito aceleracion negativa
					if (aceleracion > 0) {
						aceleracionNave = aceleracion;
					}
					disparo = false;
				}
				break;
			case MotionEvent.ACTION_UP:
				giroNave = 0;
				aceleracionNave = 0;
				if (disparo) {
					// activarMisil();
				}
				break;
			}

			mX = x;
			mY = y;
		}
		return true;
	}

	class ThreadJuego extends Thread {
		@Override
		public void run() {
			while (true) {
				actualizarFisica();
			}
		}
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		// TODO Auto-generated method stub
		float valor = event.values[1];
		if (!hayValorInicial) {
			valorInicial = valor;
			hayValorInicial = true;
		}
		giroNave = (int) (valor - valorInicial) / 3;

	}
}